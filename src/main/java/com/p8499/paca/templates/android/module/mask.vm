## Context:
##   Class StringUtils
##   Class JsonPath
##   LinkedHashMap project
##   Integer index
#set($projectContext=$JsonPath.parse($project))

#set($module=$project.modules[$index])
package $project.envAndroid.packageMask;

import java.io.IOException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import ${project.envAndroid.packageBase}.Mask;

@JsonSerialize(using=${module.androidMaskAlias}.Serializer.class)
public class $module.androidMaskAlias implements Mask<$module.androidMaskAlias>{
    #set($keyUnique=$projectContext.read("$.modules[$index].uniques[?(@.key==true)]")[0])
    ## for each field
    #foreach($field in $module.fields)
        ## fields initial value
        protected boolean $field.databaseColumn=false;
        ## getter
        public boolean get$StringUtils.capitalize($field.databaseColumn) () {
            return $field.databaseColumn;
        }
        ## setter
        public $module.androidMaskAlias set$StringUtils.capitalize($field.databaseColumn) (boolean $field.databaseColumn) {
            this.$field.databaseColumn=$field.databaseColumn;
            return this;
        }
    #end

    ## constructor
    public $module.androidMaskAlias (
        #foreach($field in $module.fields)
            boolean $field.databaseColumn
            #if($velocityHasNext)
                ,
            #end
        #end
    ) {
        #foreach($field in $module.fields)
            this.$field.databaseColumn=$field.databaseColumn;
        #end
    }

    ## constructor
    public $module.androidMaskAlias () {
    }

    ## all
    @Override
    public $module.androidMaskAlias all(boolean b) {
        #foreach($field in $module.fields)
            this.$field.databaseColumn=b;
        #end
        return this;
    }

    ## keys
    @Override
    public $module.androidMaskAlias keys(boolean b) {
        #foreach($keyField in $projectContext.read("$.modules[$index].fields[?(@.databaseColumn in $keyUnique.items)]"))
            this.$keyField.databaseColumn=b;
        #end
        return this;
    }

    ## attributes
    @Override
    public $module.androidMaskAlias attributes(boolean b) {
        #foreach($attributeField in $projectContext.read("$.modules[$index].fields[?(@.databaseColumn nin $keyUnique.items && @.source=='table')]"))
            this.$attributeField.databaseColumn=b;
        #end
        return this;
    }

    ## physicals
    @Override
    public $module.androidMaskAlias physicals(boolean b) {
        #foreach($physicalField in $projectContext.read("$.modules[$index].fields[?(@.source=='table')]"))
            this.$physicalField.databaseColumn=b;
        #end
        return this;
    }

    ## virtuals
    @Override
    public $module.androidMaskAlias virtuals(boolean b) {
        #foreach($virtualField in $projectContext.read("$.modules[$index].fields[?(@.source=='view')]"))
            this.$virtualField.databaseColumn=b;
        #end
        return this;
    }

    ## getter by field name
    @Override
    public boolean get(String p) {
        #foreach($field in $module.fields)
            #if($velocityCount>1)
                else
            #end
            if(p.equals("$field.databaseColumn"))
                return $field.databaseColumn;
        #end
        return false;
    }

    ## setter by field name
    @Override
    public $module.androidMaskAlias set(String p, boolean b) {
        #foreach($field in $module.fields)
            #if($velocityCount>1)
                else
            #end
            if(p.equals("$field.databaseColumn"))
                this.$field.databaseColumn=b;
        #end
        return this;
    }

    ## json serializer
    public static class Serializer extends JsonSerializer<$module.androidMaskAlias> {
        @Override
        public void serialize($module.androidMaskAlias value,JsonGenerator gen,SerializerProvider serializers) throws IOException,JsonProcessingException {
            gen.writeStartObject();
            #foreach($field in $module.fields)
                if(value.get$StringUtils.capitalize($field.databaseColumn)()) {
                    gen.writeFieldName("$field.databaseColumn");
                    gen.writeBoolean(value.get$StringUtils.capitalize($field.databaseColumn)());
                }
            #end
            gen.writeEndObject();
        }
    }
}